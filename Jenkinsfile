pipeline {
    agent any
    tools {
        nodejs "Node18"  // S·ª≠ d·ª•ng Node.js 18 thay v√¨ Node 23
    }
    environment {
        REGISTRY = 'localhost:80'
        PROJECT = 'clothes-web'
        IMAGE_NAME = 'clothes-frontend'
        HARBOR_CREDS = 'harbor-credentials-id'
        DOCKER_IMAGE_TAG = "${env.BUILD_NUMBER}"
    }
    stages {
        stage('Start') {
            steps {
                script {
                    echo "üöÄ Pipeline b·∫Øt ƒë·∫ßu ch·∫°y!"
                }
            }
        }
        stage('Checkout Source Code') {
            steps {
                script {
                    echo "üîÑ Clone source code t·ª´ GitHub..."
                    git url: 'https://github.com/tierik-bjornson/Clothes-frontend.git', branch: 'main'
                    echo "‚úÖ Clone th√†nh c√¥ng!"
                }
            }
        }
        stage('Update npm lockfile') {
            steps {
                script {
                    echo "üîÑ C·∫≠p nh·∫≠t package-lock.json"
                    sh 'npm install --package-lock-only'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                script {
                    echo "üì¶ C√†i ƒë·∫∑t dependencies (b·ªè qua l·ªói version)..."
                    sh 'npm install --legacy-peer-deps'
                    echo "‚úÖ C√†i ƒë·∫∑t xong!"
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    echo "üèóÔ∏è Build ·ª©ng d·ª•ng ReactJS..."
                    sh 'npm run build'
                    echo "‚úÖ Build ho√†n t·∫•t!"
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    echo "üß™ Ch·∫°y test..."
                    sh 'npm test || echo "‚ö†Ô∏è Kh√¥ng c√≥ test n√†o, b·ªè qua..."'
                    echo "‚úÖ Test ho√†n t·∫•t!"
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    echo "üê≥ Build Docker image..."
                    sh "docker build -t ${REGISTRY}/${PROJECT}/${IMAGE_NAME}:${DOCKER_IMAGE_TAG} ."
                    echo "‚úÖ Build Docker image th√†nh c√¥ng!"
                }
            }
        }
        stage('Push to Harbor') {
            steps {
                script {
                    echo "üîë ƒêƒÉng nh·∫≠p v√†o Harbor..."
                    withCredentials([usernamePassword(credentialsId: HARBOR_CREDS, usernameVariable: 'HARBOR_USER', passwordVariable: 'HARBOR_PASS')]) {
                        sh "docker login ${REGISTRY} -u $HARBOR_USER -p $HARBOR_PASS"
                    }
                    echo "üì§ Push image l√™n Harbor..."
                    sh "docker push ${REGISTRY}/${PROJECT}/${IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                    sh "docker tag ${REGISTRY}/${PROJECT}/${IMAGE_NAME}:${DOCKER_IMAGE_TAG} ${REGISTRY}/${PROJECT}/${IMAGE_NAME}:latest"
                    sh "docker push ${REGISTRY}/${PROJECT}/${IMAGE_NAME}:latest"
                    echo "‚úÖ Push th√†nh c√¥ng!"
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                script {
                    echo "üóëÔ∏è D·ªçn d·∫πp Docker image..."
                    sh "docker rmi ${REGISTRY}/${PROJECT}/${IMAGE_NAME}:${DOCKER_IMAGE_TAG} || true"
                    echo "‚úÖ D·ªçn d·∫πp ho√†n t·∫•t!"
                }
            }
        }
    }
    post {
        success {
            echo 'üéâ Build v√† push l√™n Harbor th√†nh c√¥ng! Repo deploy ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.'
        }
        failure {
            echo '‚ùå Build th·∫•t b·∫°i. Ki·ªÉm tra logs ƒë·ªÉ xem chi ti·∫øt.'
        }
    }
}
